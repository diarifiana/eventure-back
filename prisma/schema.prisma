generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int              @id @default(autoincrement())
  referralNumber String           @unique
  fullName       String
  userName       String
  email          String
  password       String
  role           Role             @default(USER)
  profilePic     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isDeleted      Boolean          @default(false)
  deletedAt      DateTime?
  organizer      Organizer?
  referralCoupon ReferralCoupon[]
  pointDetails   PointDetail[]
  transactions   Transaction[]

  @@map("users")
}

model Organizer {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  name              String @unique
  slug       String   @unique
  aboutUs           String?
  profilePic        String
  bankName          String?
  bankAccountNumber String?
  bankAccountHolder String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isDeleted         Boolean  @default(false)
  events            Event[]  @relation("OrganizerToEvent")

  @@map("organizers")
}

model ReferralCoupon {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  referralCoupon String        @unique
  amount         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expiredAt      DateTime
  isClaimed      Boolean       @default(false)
  isDeleted      Boolean       @default(false)
  transaction    Transaction[]

  @@map("referralCoupons")
}

model PointDetail {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("pointDetails")
}

model Event {
  id                Int          @id @default(autoincrement())
  category          CategoryName
  organizerId       Int
  organizer         Organizer    @relation("OrganizerToEvent", fields: [organizerId], references: [id])
  slug              String       @unique
  name              String       @unique
  desc              String
  startDate         DateTime
  endDate           DateTime
  location          Location
  thumbnail         String
  totalTransactions Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isDeleted         Boolean      @default(false)
  vouchers          Voucher[]
  tickets           Ticket[]

  @@map("events")
}

model Voucher {
  id             Int           @id @default(autoincrement())
  eventName      String
  event          Event         @relation(fields: [eventName], references: [name])
  code           String        @unique
  discountAmount Int
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isDeleted      Boolean       @default(false)
  transactions   Transaction[]

  @@map("vouchers")
}

model Ticket {
  id                 Int                 @id @default(autoincrement())
  eventName          String
  event              Event               @relation(fields: [eventName], references: [name])
  ticketType         String
  price              Int
  qty                Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isDeleted          Boolean             @default(false)
  transactions       Transaction[]
  transactionDetails TransactionDetail[]

  @@map("tickets")
}

model Transaction {
  uuid               String              @unique @default(uuid())
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  referralCouponUsed String?
  referralCoupon     ReferralCoupon?     @relation(fields: [referralCouponUsed], references: [referralCoupon])
  voucherUsed        String?
  voucher            Voucher?            @relation(fields: [voucherUsed], references: [code])
  totalAmount        Int
  status             Status              @default(WAITING_FOR_PAYMENT)
  usePoints          Boolean             @default(false)
  pointsUsed         Int                 @default(0)
  paymentProof       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isDeleted          Boolean             @default(false)
  review             Review[]
  transactionDetails TransactionDetail[]
  ticket             Ticket?             @relation(fields: [ticketId], references: [id])
  ticketId           Int?

  @@map("transactions")
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [uuid])
  ticketId      Int
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  qty           Int
}

model Review {
  id            Int         @id @default(autoincrement())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [uuid])
  review        String
  rating        Rating
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)

  @@map("reviews")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  WAITING_FOR_PAYMENT
  WAITING_CONFIRMATION
  REJECTED
  EXPIRED
  CANCELED
  DONE
}

enum Rating {
  IMPERFECT
  BAD
  GOOD
  EXCELLENT
  PERFECT
}

enum Location {
  JAKARTA
  BANDUNG
  SURABAYA
  YOGYAKARTA
  SEMARANG
}

enum CategoryName {
  MUSIC
  EDUCATION
  CULTURE
  BUSINESS
  FASHION
  SPORT
}
